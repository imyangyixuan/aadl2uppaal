package model_1
public
	with Base_Types;
	with Data_Model;
	
process rwr
end rwr;

process wwr
end wwr;

process rww
end rww;

process wrw
end wrw;


process implementation rwr.impl
	subcomponents
		rwr: data Base_Types::Integer
		{
			Data_Model::Initial_Value => ("1");
		};
		rwr1: thread rwr1;
		rwr2: thread rwr2;
	connections
		CN1: port rwr1.message1->rwr2.message1;
		CN2: port rwr2.message2->rwr1.message2;
		DA1: data access rwr->rwr1.rwr;
		DA2: data access rwr->rwr2.rwr;
end rwr.impl;

thread rwr1
	features
		message1: out event port;
		message2: in event port;
		rwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end rwr1;

thread implementation rwr1.impl
	subcomponents
		b: data Base_Types::Integer
		{
			Data_Model::Initial_Value => ("-1");
		};
		counts: data Base_Types::Integer
		{
			Data_Model::Initial_Value => ("0");
		};
	annex behavior_specification {**
	states
		rwr1_start: initial complete state;
		rwr1_1: state;
		rwr1_2: state;
		rwr1_3: state;
		rwr1_4: state;
		rwr1_end: final state;
	transitions
		rwr1_start -[on dispatch]-> rwr1_1;
		rwr1_1 -[rwr = 1]-> rwr1_2;
		rwr1_1 -[not(rwr = 1)]-> rwr1_end;
		rwr1_2 -[counts < 2]-> rwr1_3{
			b := rwr;
			message1!};
		rwr1_3 -[]-> rwr1_4{
			message2?;
			counts := counts + 1};
		rwr1_2 -[not(counts < 2)]-> rwr1_end{
			message1!};
		rwr1_4 -[]-> rwr1_2;
	**};
end rwr1.impl;

thread rwr2
features
	message1: in event port;
	message2: out event port;
	rwr: requires data access Base_Types::Integer;
properties
	Priority => 5;
end rwr2;

thread implementation rwr2.impl
	subcomponents
		counts:data Base_Types::Integer
		{
			Data_Model::Initial_Value=>("0");
		};
	annex behavior_specification {**
		states
			rwr2_start:initial complete state;
			rwr2_1:state;
			rwr2_2:state;
			rwr2_3:state;
			rwr2_end:final state;
		transitions
			rwr2_start-[on dispatch]->rwr2_1{
				message1?;
				rwr:=2
			};
			rwr2_1-[counts<2]->rwr2_2{
				message2!
			};
			rwr2_1-[not(counts<2)]->rwr2_end;
			rwr2_2-[]->rwr2_3{
				message1?;
				counts:=counts+1
			};
			rwr2_3-[]->rwr2_1;
	**};
end rwr2.impl;

thread wwr1
	features
		message1: out event port;
		message2: in event port;
		wwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end wwr1;

thread wwr2
	features
		message1: out event port;
		message2: in event port;
		wwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end wwr2;

thread rww1
	features
		message1: out event port;
		message2: in event port;
		rwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end rww1;

thread rww2
	features
		message1: out event port;
		message2: in event port;
		rwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end rww2;

thread wrw1
	features
		message1: out event port;
		message2: in event port;
		rwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end wrw1;

thread wrw2
	features
		message1: out event port;
		message2: in event port;
		rwr: requires data access Base_Types::Integer;
	properties
		Priority => 5;
end wrw2;

end model_1;